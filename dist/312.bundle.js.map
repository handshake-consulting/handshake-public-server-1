{"version":3,"file":"312.bundle.js","mappings":"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","sources":["webpack://ask give.org chatbot package/./src/fullPage.js"],"sourcesContent":["/* eslint-disable no-prototype-builtins */\n'use strict';\n\nimport { BASEURL } from \"./constant\";\nimport {  scrollToDiv,typewords,generateAndStoreUUID, storeValueInSession,readValueFromSession, LoadFAQs  } from \"./utils\";\n\nlet abortController = new AbortController()\nlet next_session = \"\"\nexport default async function initFullScreenPage() {\n\n//  await  initLoad()\n  // setCookie(\"username\", 'dfsdijkjjk', 1);\n  typewords('full');\n  //  openModal();\n\n   if(!readValueFromSession('username')){\n    generateAndStoreUUID('username')\n    generateAndStoreUUID('chat_session')\n   }\n\n\n\n\n\n\n\nconst getCUrrentyear = document.getElementById('gb-current-year');\ngetCUrrentyear.textContent = new Date().getFullYear() + 'Â©';\n\nconst gbForm = document.getElementById('gb-form');\nconst gbSubmitBtn = document.getElementById('gb-submit-btn');\nconst gbTextarea = gbForm.querySelector('textarea[name=\"chat\"]');\n\n// Add event listener to submit button\ngbSubmitBtn.addEventListener('click', async (event) => {\n  event.preventDefault();\n // console.log('Clicked me');\n \n  const inputText = gbTextarea.value;\n\n  // Disable the submit button and textarea\n  gbSubmitBtn.disabled = true;\n  gbTextarea.disabled = true;\n\n  await makeRequest(inputText);\n\n  // Clear the textarea value\n  gbTextarea.value = \"\";\n\n  // Re-enable the submit button and textarea\n  gbSubmitBtn.disabled = false;\n  gbTextarea.disabled = false;\n});\n\nconst newChat = document.getElementById('gb-resetchat');\n\nnewChat.onclick = (e)=>{\n  e.preventDefault()\n  resetChat()\n // console.log(\"you clicked\");\n}\n\n\n // Load data from session when the page loads\n loadDataFromSession();\n LoadFAQs()\n\n}\n\n\n\nconst makeRequest = async (message,route,next_message) => {\n     abortController = new AbortController();\n    if(message.trim().length === 0){\n      alert('Please enter a message');\n      return;\n    }\n    scrollToDiv('gb-chatbot-scrolldown');\n    setLoader(true)\n          const newId = Date.now().toString();\n    try {\n      // console.log('fetching');\n      const response = await fetch(route ===\"retry\"? BASEURL+\"/retry\" :BASEURL+\"/submit\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          message: message.trim(),\n          chat_session:readValueFromSession('chat_session'),\n          username:readValueFromSession('username'),\n          next_message:  route ===\"retry\"? next_message : next_session\n          // token:this.token,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        signal: abortController.signal,\n      });\n\n      if (!response.ok) {\n        const json = await response.text();\n        throw new Error(json);\n      }\n\n\n\n\n      const data = response.body;\n      if (!data) {\n        return;\n      }\n    \n\n      const reader = data.pipeThrough(new TextDecoderStream()).getReader();\n\n\n      let botResponseText = \"\";\n\n      // let botter = document.getElementById(\"gb-bot\");\n      // botter.id = \"gb-bot-\"+newId\n     // let currentPairIndex = this.chatresult.length; // Save the index for the new pair being added\n\n      // Add a new pair with user question and an empty bot response to be filled\n      // this.chatresult.push({\n      //   id: newId,\n      //   usertext: this.searchValue,\n      //   bottext: botResponseText,\n      // });\n      appendUserMessage(message, newId);\n      appendBotDiv(botResponseText,newId)\n      // this.$nextTick(() => {\n      //   this.$refs.scrollTarget.scrollIntoView({ behavior: \"smooth\" });\n      // });\n      let botFlex =  document.getElementById(\"botFlex-1-\"+newId)\n\n      appendBotMessage(botFlex, newId);\n      // Store the user message in the session\n      storeValueInSession(`user_message_${newId}`, message);\n\n\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        const { value, done } = await reader.read();\n        if (done) {\n         // await this.getContent(this.searchValue,newId);\n         // addSessionData(getCookie(\"username\"), getCookie(\"chat_session\"), this.searchValue);\n         const botRefer = document.createElement('div');\n         botRefer.id=\"botRef-1-\"+newId\n         botRefer.className = \"gb-mt-2 gb-px-4 gb-flex gb-flex-wrap gb-gap-1\"\n         botFlex.appendChild(botRefer);\n\n\n     \n        await   makeReference(message,newId)\n         setLoader(false)\n          // this.isLoading = false;\n          // this.searchValue = \"\";\n          break;\n        }\n        // this.$nextTick(() => {\n        //   this.$refs.scrollTarget.scrollIntoView({ behavior: \"smooth\" });\n        // });\n\n        // console.log(value);\n\n        // Append incoming stream to bot response text\n        botResponseText += value;\n\n\n\n        let messageParagraph = document.getElementById(newId);\n        messageParagraph.innerHTML = window.marked.parse(botResponseText);\n        botFlex.appendChild(messageParagraph);\n        // botFlex.scrollIntoView({ behavior: \"smooth\", block: \"end\" });\n        document.getElementById('gb-chatbot-scrolldown').scrollIntoView({ behavior: 'smooth', block: 'end' });\n              // Store the bot response in the session\n      storeValueInSession(`bot_response_${newId}`, botResponseText);\n      }\n\n\n    //  await makeReference(message,newId)\n    } catch (error) {\n     // console.log(\"Error:\", error);\n      // Check if the error is caused by request cancellation\n      if (error.name === \"AbortError\") {\n        // console.log(\"Request cancelled\");\n        // this.isLoading = false;\n        // this.statusMessage = \"Request cancelled\";\n        setLoader(false)\n      } else {\n        // this.isLoading = false;\n        console.error(\"Error:\", error);\n        setLoader(false)\n        // this.statusMessage = error;\n        // this.isWaiting = false;\n      }\n    }\n}\n\n\nconst makeReference = async (userprompt, newId)=>{\n  try {\n    const response = await fetch(BASEURL+\"/content\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        message: userprompt,\n        chat_session:readValueFromSession('chat_session'),\n        username:readValueFromSession('username'),\n        next_message: next_session\n        // token:this.token,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"accept\":\"application/json\"\n      },\n    });\n    const data = await response.json();\n//     console.log(data);\n// console.log(newId);\n    const dataresp = await JSON.parse(data);\n   // console.log(JSON.parse(data))\n  //  console.log(dataresp);\n    if (dataresp.output !== \"\") {\n      // console.log(dataresp.keyword_replacements.prompt.documentcontent[0]);\n      // this.refcontent = dataresp.queries.content[0];\n      // this.reference =\n      //   \"Selected Source From : \" + dataresp.queries.title[0];\n      //this.refurl =  dataresp.keyword_replacements.prompt.url[0]\n      //  await this.fetchFavicon(this.refurl)\n      next_session = dataresp.next_node\n      const searchDatas = dataresp.queries;\n\n      storeValueInSession(`next_message_${newId}`, next_session);\n\n      // Ensure that there is at least one key with an array to determine the length\n      if (\n        Object.keys(searchDatas).length === 0 ||\n        searchDatas.url.length === 0\n      ) {\n        throw new Error(\"No data available\");\n      }\n\n      // await Promise.all(\n      \n        const formattedData =  searchDatas.url.map(async(_, index) => {\n\n\n        appendReferences(newId, {\n          id: newId,\n          title: searchDatas.title[index],\n          content: searchDatas.content[index],\n          date: searchDatas.date[index],\n          url: searchDatas.url[index],\n          // faviconUrl: await fetchFavicon(searchDatas.url[index])\n        })\n \n\n        // const newId = /* generate your new ID here */;\n        return {\n          id: newId,\n          title: searchDatas.title[index],\n          content: searchDatas.content[index],\n          date: searchDatas.date[index],\n          url: searchDatas.url[index],\n          // next_session\n          // Uncomment and complete the following line if needed\n         // faviconUrl: await fetchFavicon(searchDatas.url[index])\n        };\n      })\n      // );\n      \n\n    //  console.log(\"Formatted Data:\", formattedData);\n      //console.log('Formatted Data', formattedData);\n      // this.searchedFrom.push(...formattedData);\n      storeValueInSession(`reference_data_${newId}`, JSON.stringify(formattedData));\n  \n    }\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }finally{\n          //  appendReferences(newId)\n          appendAction(newId)\n  }\n}\n\n\n// async function fetchFavicon(url) {\n//   let faviconUr;\n//   try {\n//     const response = await fetch(BASEURL+`/favicon`,{\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"accept\":\"application/json\"\n//       },\n//       body: JSON.stringify({\n//         url\n//       }),\n//     });\n//     const data = await response.json();\n\n//     if (data.faviconUrl) {\n//       faviconUr = data.faviconUrl;\n//     } else {\n//       faviconUr = \"https://give.org/favicon.ico\";\n//       //  console.error('No favicon found.');\n//     }\n//   } catch (error) {\n//     faviconUr = \"https://give.org/favicon.ico\";\n//      console.error('Error fetching favicon:', error);\n//   }\n\n  \n//   return faviconUr;\n// }\n\nconst resetChat = ()=>{\n  // removeSessionItem('chat_session')\n  generateAndStoreUUID('chat_session')\n  document.getElementById('gb-chatbody').innerHTML = '';\n  next_session = null\n\n    // Clear user_message_* sessions\n    const userMessageKeys = Object.keys(sessionStorage).filter(key => key.startsWith('user_message_'));\n    userMessageKeys.forEach(key => {\n      sessionStorage.removeItem(key);\n    });\n\n    // Clear next_message_* sessions\n    const nextMessageKeys = Object.keys(sessionStorage).filter(key => key.startsWith('next_message_'));\n    nextMessageKeys.forEach(key => {\n      sessionStorage.removeItem(key);\n    });\n\n\n  \n    // Clear bot_response_* sessions\n    const botResponseKeys = Object.keys(sessionStorage).filter(key => key.startsWith('bot_response_'));\n    botResponseKeys.forEach(key => {\n      sessionStorage.removeItem(key);\n    });\n  \n    // Clear reference_data_* sessions\n    const referenceDataKeys = Object.keys(sessionStorage).filter(key => key.startsWith('reference_data_'));\n    referenceDataKeys.forEach(key => {\n      sessionStorage.removeItem(key);\n    });\n\n    location.reload();\n\n}\n\nfunction setLoader(on){\n  const gbloader = document.getElementById('gb-chatbot-loader');\n  const gbsubbutton = document.getElementById('gb-submit-icon');\n  const gbbuttonloader = document.getElementById('gb-submit-loading');\n  if(on){\n    gbloader.classList.remove(\"gb-hidden\");\n    gbsubbutton.classList.add(\"gb-hidden\");\n    gbbuttonloader.classList.remove(\"gb-hidden\");\n  }else{\n    gbloader.classList.add(\"gb-hidden\");\n    gbsubbutton.classList.remove(\"gb-hidden\");\n    gbbuttonloader.classList.add(\"gb-hidden\");\n  }\n\n}\n\n\n function appendUserMessage(message,id) {\n  const chatContainer = document.getElementById('gb-chatbody');\n  const userDiv = document.createElement('div');\n  userDiv.className = 'gb-flex gb-flex-row-reverse  gb-my-4';\n  userDiv.id = \"gb-user-\"+id\n  \n  // Create a <p> element\n  const messageParagraph = document.createElement('p');\n  // Set its text content to the message\n  messageParagraph.className = 'gb-p-4 gb-bg-reply-gradient gb-text-white gb-rounded ';\n  messageParagraph.textContent = message;\n  // Append the <p> element to the userDiv\n  userDiv.appendChild(messageParagraph);\n  \n  // Append the userDiv to the chatContainer\n  chatContainer.appendChild(userDiv);\n\n\n\n}\n\n function appendBotDiv(message,id) {\n// Create bot message container and image outside the function\nconst chatContainer = document.getElementById('gb-chatbody');\nconst botDiv = document.createElement('div');\nbotDiv.className = 'gb-mt-5  gb-flex gb-flex-col  md:gb-flex-row gb-items-start gb-space-x-3';\nbotDiv.id = \"gb-bot-\"+id;\nconst img = document.createElement('img');\nimg.src = \"/sf-images/default-source/giving-coach-ai/giveorgbfeacd32d46e4cb6884e4af525762179.png?Status=Master&sfvrsn=218481fd_2\";\nimg.className = \"gb-w-[59.47px]  gb-rounded-[10px]\"\nbotDiv.appendChild(img);\nconst botFlex = document.createElement('div');\nbotFlex.id=\"botFlex-1-\"+id\nbotFlex.className = \"gb-bg-[#D9EBF1] gb-rounded \"\n\nbotDiv.appendChild(botFlex);\nchatContainer.appendChild(botDiv);\n\n\n\n\n\n\n\n\n}\n\n\n function appendBotMessage(botDiv,newId) {\n  // Create a <p> element\n  const messageParagraph = document.createElement('p');\n  messageParagraph.className = 'gb-p-4  gb-my-5 gb-rounded gb-whitespace-pre-wrap';\n  messageParagraph.id = newId\n  // Set its text content to the message\n  // messageParagraph.textContent = message;\n  // Append the <p> element to the botDiv\n  botDiv.appendChild(messageParagraph);\n}\n\nfunction appendReferences(newId, data){\n  const botContainer = document.getElementById('botRef-1-'+newId);\n\n  const referenceLink = document.createElement('a');\n  referenceLink.href = data.url;\n  referenceLink.target = \"_blank\";\n\n  const spanLink = document.createElement('span');\n  spanLink.className = \"gb-bg-[#FFD368] gb-space-x-2 gb-no-underline gb-hover:underline gb-text-xs gb-font-medium gb-inline-flex gb-items-center gb-px-2.5 gb-py-0.5 gb-rounded-lg\";\n  \n\n  const referenceImg = document.createElement('img');\n  referenceImg.src = \"/sf-images/default-source/giving-coach-ai/book.png?Status=Temp&sfvrsn=5dc9ba90_2\";\n  referenceImg.width =17\n  referenceImg.height = 16\n  spanLink.appendChild(referenceImg);\n \n\n  const referenceText = document.createElement('p');\n  referenceText.textContent = data.title;\n  referenceText.className=\"hover:gb-underline gb-m-0 gb-text-black\"\n\n  spanLink.appendChild(referenceText);\n\n\n\n  referenceLink.appendChild(spanLink);\n\n\n\n  botContainer.appendChild(referenceLink);\n  // botContainer.appendChild(messageActionsDiv);\n}\n\nfunction appendAction(newId){\n  // Actions \nconst botContainer = document.getElementById('botFlex-1-'+newId);\nconst messageActionsDiv = document.createElement('div');\nmessageActionsDiv.className = \"gb-px-4 gb-my-2 gb-pb-3\"\nmessageActionsDiv.id=\"gb-message-actions-1\"+newId\n\n// Reload button\nconst reloadActionsButton = document.createElement('button');\nreloadActionsButton.className = \"hover:gb-bg-[#E4E4E4] gb-p-2.5 gb-rounded-full\";\nconst reloadImg = document.createElement('img');\nreloadImg.src = \"/sf-images/default-source/giving-coach-ai/reload.png?Status=Temp&sfvrsn=37de681e_2\";\nreloadImg.alt= \"Reload\"\nreloadImg.title= \"Reload\"\nreloadActionsButton.appendChild(reloadImg);\nreloadActionsButton.id=\"gb-message-actions-2-\"+newId\nreloadActionsButton.addEventListener('click', () => handleRetry(newId));\nmessageActionsDiv.appendChild(reloadActionsButton);\n\n    // Report button\n    const reportActionsButton = document.createElement('button');\n    reportActionsButton.className = \"hover:gb-bg-[#E4E4E4] gb-p-2.5 gb-rounded-full\";\n    const reportImg = document.createElement('img');\n    reportImg.title = \"Report\"\n    reportImg.alt = \"Report\"\n    reportImg.src = \"/sf-images/default-source/giving-coach-ai/report.png?Status=Temp&sfvrsn=ad5a1c9f_2\";\n    reportActionsButton.appendChild(reportImg);\n    reportActionsButton.id=\"gb-message-actions-2\"+newId\n    reportActionsButton.addEventListener('click', () => handleReport(newId));\n    messageActionsDiv.appendChild(reportActionsButton);\n\n    botContainer.appendChild(messageActionsDiv);\n}\n\n\nexport function loadDataFromSession() {\n  const chatContainer = document.getElementById('gb-chatbody');\n\n  // Retrieve user message keys from session\n  const userMessageKeys = Object.keys(sessionStorage)\n  .filter(key => key.startsWith('user_message_'))\n  .sort((a, b) => {\n    const idA = parseInt(a.split('_')[2]);\n    const idB = parseInt(b.split('_')[2]);\n    return idA - idB;\n  });\n  // Iterate over user message keys\n  userMessageKeys.forEach(userKey => {\n    const messageId = userKey.split('_')[2];\n    const userMessage = readValueFromSession(userKey);\n\n    // Append user message\n    appendUserMessage(userMessage, messageId);\n\n    // Check if corresponding bot response exists\n    const botKey = `bot_response_${messageId}`;\n    if (sessionStorage.hasOwnProperty(botKey)) {\n      const botMessage = readValueFromSession(botKey);\n\n      // Append bot response\n      appendBotDiv(botMessage, messageId);\n      const botFlex = document.getElementById(\"botFlex-1-\" + messageId);\n      appendBotMessage(botFlex, messageId);\n\n      let messageParagraph = document.getElementById(messageId);\n      messageParagraph.innerHTML = window.marked.parse(botMessage);\n      botFlex.appendChild(messageParagraph);\n\n      document.getElementById('gb-chatbot-scrolldown').scrollIntoView({ behavior: 'smooth', block: 'end' });\n\n      const botRefer = document.createElement('div');\n      botRefer.id = \"botRef-1-\" + messageId;\n      botRefer.className = \"gb-mt-2 gb-px-4 gb-flex gb-flex-wrap gb-gap-1\";\n      botFlex.appendChild(botRefer);\n\n      // Check if corresponding reference data exists\n      const referenceKey = `reference_data_${messageId}`;\n      if (sessionStorage.hasOwnProperty(referenceKey)) {\n        const referenceData = JSON.parse(readValueFromSession(referenceKey));\n        referenceData.forEach(data => {\n          // console.log(messageId);\n          // console.log(data);\n          appendReferences(messageId, data);\n        });\n        appendAction(messageId);\n      }\n    }\n  });\n\n  // Scroll to the bottom of the chat container\n  chatContainer.scrollTop = chatContainer.scrollHeight;\n}\n\n\nasync function handleRetry(id) {\n // console.log(id);\n  try {\n    const userMessage = readValueFromSession(`user_message_${id}`);\n    const nextMessage = readValueFromSession(`next_message_${id}`);\n    // Find the index of the clicked message\n    const clickedIndex = Array.from(document.querySelectorAll('[id^=\"gb-user-\"]'))\n      .findIndex(el => el.id === `gb-user-${id}`);\n\n    // Remove the user messages, bot responses, references, and actions for the clicked message and all messages after it\n    const userDivs = Array.from(document.querySelectorAll('[id^=\"gb-user-\"]')).slice(clickedIndex);\n    userDivs.forEach(userDiv => userDiv.remove());\n\n    const botDivs = Array.from(document.querySelectorAll('[id^=\"gb-bot-\"]')).slice(clickedIndex);\n    botDivs.forEach(botDiv => botDiv.remove());\n\n    // Remove the stored user messages, bot responses, and reference data from session for the clicked message and all messages after it\n    const userMessageKeys = Object.keys(sessionStorage)\n      .filter(key => key.startsWith('user_message_') && parseInt(key.split('_')[2]) >= id);\n    userMessageKeys.forEach(key => sessionStorage.removeItem(key));\n\n    const botResponseKeys = Object.keys(sessionStorage)\n      .filter(key => key.startsWith('bot_response_') && parseInt(key.split('_')[2]) >= id);\n    botResponseKeys.forEach(key => sessionStorage.removeItem(key));\n\n    const referenceDataKeys = Object.keys(sessionStorage)\n      .filter(key => key.startsWith('reference_data_') && parseInt(key.split('_')[2]) >= id);\n    referenceDataKeys.forEach(key => sessionStorage.removeItem(key));\n\n    // Call the makeRequest function with the user message and the clicked message ID\n    await makeRequest(userMessage, 'retry', nextMessage);\n  } catch (e) {\n    console.error('Error during retry:', e);\n  }\n}\n\n\n// Add event listeners for closing the modal\nconst closeModalButton = document.getElementById('closeModal');\ncloseModalButton.addEventListener('click', closeModal);\n\nconst closeButton = document.getElementById('closeButton');\ncloseButton.addEventListener('click', closeModal);\n\nfunction closeModal() {\n  const modal = document.getElementById('reportModal');\n  modal.classList.add('gb-hidden');\n}\n\nfunction handleReport(id) {\n  const modal = document.getElementById('reportModal');\n  modal.classList.remove('gb-hidden');\n  modal.setAttribute('data-message-id', id);\n}\n\n// Add event listener for submitting the form\n\nconst formBtn = document.getElementById('gb-reportmodal-submit');\nformBtn.addEventListener('click', handleFormSubmit);\n\nasync function handleFormSubmit(event) {\n  event.preventDefault();\n // console.log(\"you clicke fullscreen\");\n\n  const modal = document.getElementById('reportModal');\n  const messageId = modal.getAttribute('data-message-id');\n  const formBtn = document.getElementById('gb-reportmodal-submit')\n\n  const userMessage = readValueFromSession(`user_message_${messageId}`);\n  const botMessage = readValueFromSession(`bot_response_${messageId}`);\n  const nextMessage = readValueFromSession(`next_message_${messageId}`);\n  const feedback = document.querySelector('#reportModal textarea[name=\"feedback\"]').value;\n    if(feedback.trim().length === 0){\n      alert('Please enter a feedback');\n      return;\n    }\n  const submitButton = formBtn\n  // const initialButtonText = submitButton.textContent;\n  submitButton.disabled = true;\n  submitButton.textContent = 'Submitting...';\n\n\n  try {\n    // Send the report data to the server\n    const response = await fetch(BASEURL + '/response', {\n      method: 'POST',\n      body: JSON.stringify({\n        username: readValueFromSession('username'),\n        message: userMessage,\n        chat_response: botMessage,\n        chat_session: readValueFromSession('chat_session'),\n        next_message: nextMessage,\n        feedback\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (response.ok) {\n      // Report submitted successfully\n     // console.log('Report submitted successfully');\n      alert('Report submitted successfully');\n      closeModal();\n    } else {\n      // Handle error response\n      console.error('Error submitting report:', response.statusText);\n    }\n  } catch (error) {\n    console.error('Error submitting report:', error);\n  }finally {\n    submitButton.disabled = false;\n    submitButton.textContent = \"Submit\";\n  }\n}\n\n// FAQ\n\nconst fullscreenDiv = document.querySelector('[data-page=\"fullscreen\"]');\nconst faqDiv = document.getElementById('faq');\nconst faqButton = document.getElementById('faqButton');\nconst fullscreenButton = document.getElementById('fullscreenButton');\n\nfunction showFAQ() {\n  // console.log(\"you clicked\");\n  fullscreenDiv.classList.add('gb-transform', '-gb-translate-x-full', 'gb-transition-transform', 'gb-duration-500', 'gb-ease-in-out');\n  faqDiv.classList.remove('gb-hidden');\n  faqDiv.classList.add('gb-transform', 'gb-translate-x-0', 'gb-transition-transform', 'gb-duration-500', 'gb-ease-in-out');\n\n}\n\nfunction showFullscreen() {\n  faqDiv.classList.add('gb-transform', 'gb-transition-transform', 'gb-duration-500', 'gb-ease-in-out');\n  setTimeout(() => {\n    faqDiv.classList.add('gb-hidden');\n    fullscreenDiv.classList.remove('gb-transform', '-gb-translate-x-full');\n  }, 500);\n}\n\n\nfaqButton.addEventListener('click', showFAQ);\n\nfullscreenButton.addEventListener('click',showFullscreen);\n\n// Check if the URL contains #faq hash\nif (window.location.hash === '#faq') {\n  showFAQ();\n}\n\n// Listen for changes in the URL hash\nwindow.addEventListener('hashchange', () => {\n  if (window.location.hash === '#faq') {\n    showFAQ();\n  } else {\n    showFullscreen();\n  }\n});\n"],"names":["abortController","AbortController","next_session","async","initFullScreenPage","document","getElementById","textContent","Date","getFullYear","gbForm","gbSubmitBtn","gbTextarea","querySelector","addEventListener","event","preventDefault","inputText","value","disabled","makeRequest","onclick","e","resetChat","loadDataFromSession","message","route","next_message","trim","length","alert","setLoader","newId","now","toString","response","fetch","method","body","JSON","stringify","chat_session","username","headers","signal","ok","json","text","Error","data","reader","pipeThrough","TextDecoderStream","getReader","botResponseText","appendUserMessage","appendBotDiv","botFlex","appendBotMessage","done","read","botRefer","createElement","id","className","appendChild","makeReference","messageParagraph","innerHTML","window","marked","parse","scrollIntoView","behavior","block","error","name","console","userprompt","dataresp","output","next_node","searchDatas","queries","Object","keys","url","formattedData","map","_","index","appendReferences","title","content","date","appendAction","sessionStorage","filter","key","startsWith","forEach","removeItem","location","reload","on","gbloader","gbsubbutton","gbbuttonloader","classList","remove","add","chatContainer","userDiv","botDiv","img","src","botContainer","referenceLink","href","target","spanLink","referenceImg","width","height","referenceText","messageActionsDiv","reloadActionsButton","reloadImg","alt","userMessage","nextMessage","clickedIndex","Array","from","querySelectorAll","findIndex","el","slice","parseInt","split","handleRetry","reportActionsButton","reportImg","modal","setAttribute","handleReport","sort","a","b","userKey","messageId","botKey","hasOwnProperty","botMessage","referenceKey","scrollTop","scrollHeight","closeModal","getAttribute","formBtn","feedback","submitButton","chat_response","statusText","fullscreenDiv","faqDiv","faqButton","fullscreenButton","showFAQ","showFullscreen","setTimeout","hash"],"sourceRoot":""}