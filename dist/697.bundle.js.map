{"version":3,"file":"697.bundle.js","mappings":"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","sources":["webpack://ask give.org chatbot package/./src/mobileView.js"],"sourcesContent":["/* eslint-disable no-constant-condition */\nimport { BASEURL } from \"./constant\";\nimport {  appendAction,loadDataFromSession,storeValueInSession,appendReferences,appendBotMessage, typewords ,appendUserMessage,appendBotDiv ,mobileChat, generateAndStoreUUID, readValueFromSession, ListentoModal} from \"./utils\";\n\nlet abortController = new AbortController()\nlet next_session = \"\"\nlet containterid = \"gb-mobile\"\n\nexport default function initHomePage() {\n  // console.log('Initializing home page logic');\n\n\n\n\n\n  // openModal();\n  // scrollToDiv('gb-bot-scrolldown')\n\n  if(!readValueFromSession('username')){\n    generateAndStoreUUID('username')\n    generateAndStoreUUID('chat_session')\n   }\n\n\n  \n  \n  // appendUserMessage('Tell me about animal charities that specifically help seals and turtles')\n\n\n  // appendBotDiv('I am a chatbot. How can I help you?')\n  // appendReferences()\n  // appendAction()\n  mobileChat()\n\n\n\n\n\n\n// Check view mode on page load\nwindow.addEventListener('load', checkViewMode);\n\n// // Check view mode when the window is resized\n// window.addEventListener('resize', checkViewMode);\n\n// faqshower()\n\n\n// LoadFAQs()\n\nListentoModal()\n\n}\n\n// let currentViewMode = null;\n\nfunction checkViewMode() {\n  loadDataFromSession(containterid);\n\n\n\n\n  const gbForm = document.getElementById('gb-form-' + containterid);\n  const gbSubmitBtn = document.getElementById('gb-submit-btn-' + containterid);\n  const gbTextarea = gbForm.querySelector('textarea[name=\"chat\"]');\n  \n  // Add event listener to submit button\n  gbSubmitBtn.addEventListener('click', async (event) => {\n    event.preventDefault();\n    // console.log('Clicked me');\n    // scrollToDiv('gb-bot-scrolldown');\n    const inputText = gbTextarea.value;\n  \n    // Disable the submit button and textarea\n    gbSubmitBtn.disabled = true;\n    gbTextarea.disabled = true;\n  \n    await makeRequest(inputText);\n  \n    // Clear the textarea value\n    gbTextarea.value = \"\";\n  \n    // Re-enable the submit button and textarea\n    gbSubmitBtn.disabled = false;\n    gbTextarea.disabled = false;\n  });\n  // Home page specific JavaScript here\n  typewords(containterid);\n\n  const newChat = document.getElementById('gb-resetchat-'+containterid);\n\n  newChat.onclick = (e)=>{\n    e.preventDefault()\n    resetChat()\n   // console.log(\"you clicked\");\n  }\n\n}\n\nexport const makeRequest = async (message,route,next_message) => {\n  abortController = new AbortController();\n  if (message.trim().length === 0) {\n    alert('Please enter a message');\n    return;\n  }\n\n  setLoader(true, containterid);\n  document.getElementById('gb-chatbot-scrolldown-'+containterid).scrollIntoView({ behavior: 'smooth', block: 'end' });\n  const newId = Date.now().toString();\n  try {\n    const response = await fetch(route ===\"retry\"? BASEURL+\"/retry\" :BASEURL+\"/submit\", {\n      method: \"POST\",\n      body: JSON.stringify(\n        {\n        message: message,\n        chat_session: readValueFromSession('chat_session'),\n        username: readValueFromSession('username'),\n        next_message:  route ===\"retry\"? next_message : next_session\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      signal: abortController.signal,\n    });\n\n    if (!response.ok) {\n      const json = await response.text();\n      throw new Error(json);\n    }\n\n    const data = response.body;\n    if (!data) {\n      return;\n    }\n\n    const reader = data.pipeThrough(new TextDecoderStream()).getReader();\n\n    let botResponseText = \"\";\n\n    appendUserMessage(message, newId, containterid);\n    appendBotDiv(botResponseText, newId, containterid);\n    let botFlex = document.getElementById(\"botFlex-1-\"+newId + \"-\" + containterid);\n\n    appendBotMessage(botFlex, newId, containterid);\n\n    storeValueInSession(`user_message_${newId}`, message);\n\n    while (true) {\n      const { value, done } = await reader.read();\n      if (done) {\n        const botRefer = document.createElement('div');\n        botRefer.className = \"gb-mt-2 gb-px-4 gb-flex gb-flex-col gb-space-y-3 gb-bot-references\";\n        botRefer.id=\"botRef-1-\"+newId + \"-\" + containterid\n        botFlex.appendChild(botRefer);\n\n        await makeReference(message, newId);\n        setLoader(false, containterid);\n        break;\n      }\n\n      botResponseText += value;\n\n      let messageParagraph = document.getElementById(newId + \"-\" + containterid);\n      messageParagraph.innerHTML = window.marked.parse(botResponseText);\n      botFlex.appendChild(messageParagraph);\n      document.getElementById('gb-chatbot-scrolldown-'+containterid).scrollIntoView({ behavior: 'smooth', block: 'end' });\n      storeValueInSession(`bot_response_${newId}`, botResponseText);\n    }\n  } catch (error) {\n    console.log(\"Error:\", error);\n    if (error.name === \"AbortError\") {\n      setLoader(false, containterid);\n    } else {\n      setLoader(false, containterid);\n      console.error(\"Error:\", error);\n    }\n  }\n};\n\nconst makeReference = async (userprompt, newId)=>{\n  try {\n   const response = await fetch(BASEURL + \"/content\", {\n     method: \"POST\",\n     body: JSON.stringify({\n       message: userprompt,\n       chat_session:readValueFromSession('chat_session'),\n       username:readValueFromSession('username'),\n       next_message: next_session\n       // token:this.token,\n     }),\n     headers: {\n       \"Content-Type\": \"application/json\",\n       \"accept\":\"application/json\"\n     },\n   });\n   const data = await response.json();\n  //     console.log(data);\n  // console.log(newId);\n   const dataresp = await JSON.parse(data);\n  // console.log(JSON.parse(data))\n  // console.log(dataresp);\n   if (dataresp.output !== \"\") {\n     // console.log(dataresp.keyword_replacements.prompt.documentcontent[0]);\n     // this.refcontent = dataresp.queries.content[0];\n     // this.reference =\n     //   \"Selected Source From : \" + dataresp.queries.title[0];\n     //this.refurl =  dataresp.keyword_replacements.prompt.url[0]\n     //  await this.fetchFavicon(this.refurl)\n     next_session = dataresp.next_node\n     const searchDatas = dataresp.queries;\n  \n     storeValueInSession(`next_message_${newId}`, next_session);\n  \n     // Ensure that there is at least one key with an array to determine the length\n     if (\n       Object.keys(searchDatas).length === 0 ||\n       searchDatas.url.length === 0\n     ) {\n       throw new Error(\"No data available\");\n     }\n  \n     const formattedData = searchDatas.url.map((_, index) => {\n  \n  \n       appendReferences(newId, {\n         id: newId,\n         title: searchDatas.title[index],\n         content: searchDatas.content[index],\n         date: searchDatas.date[index],\n         url: searchDatas.url[index],\n       },containterid )\n  \n  \n       // const newId = /* generate your new ID here */;\n       return {\n         id: newId,\n         title: searchDatas.title[index],\n         content: searchDatas.content[index],\n         date: searchDatas.date[index],\n         url: searchDatas.url[index],\n         // Uncomment and complete the following line if needed\n         // faviconUrl: await fetchFavicon(searchDatas.url[index])\n       };\n     });\n     \n  \n    // console.log(\"Formatted Data:\", formattedData);\n     //console.log('Formatted Data', formattedData);\n     // this.searchedFrom.push(...formattedData);\n     storeValueInSession(`reference_data_${newId}`, JSON.stringify(formattedData));\n    \n   }\n  } catch (error) {\n   console.error(\"Error:\", error);\n  }finally{\n       //  appendReferences(newId)\n       appendAction(newId, containterid)\n  }\n  }\n\n\n// async function fetchFavicon(url) {\n//   console.log('Fetching favicon for:', url);\n//   let faviconUr;\n//   // try {\n//     const response = await fetch(BASEURL+`/favicon`,{\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"accept\":\"application/json\"\n//       },\n//       body: JSON.stringify({\n//         url: getBaseURL(url),\n//       }),\n//     });\n//     const data = await response.json();\n\n//     if (data.faviconUrl) {\n//       faviconUr = data.faviconUrl;\n//     } else {\n//       faviconUr = \"https://give.org/favicon.ico\";\n//       //  console.error('No favicon found.');\n//     }\n//   // }\n  \n//   // catch (error) {\n//   //   faviconUr = \"https://give.org/favicon.ico\";\n//   //    console.error('Error fetching favicon:', error);\n//   // }\n\n//   console.log('Favicon URL:', faviconUr);\n//   return faviconUr;\n// }\n\nconst resetChat = ()=>{\n  // removeSessionItem('chat_session')\n  generateAndStoreUUID('chat_session')\n  document.getElementById(containterid).innerHTML = '';\n  next_session = null\n\n  // Clear user_message_* sessions\n  const userMessageKeys = Object.keys(sessionStorage).filter(key => key.startsWith('user_message_'));\n  userMessageKeys.forEach(key => {\n    sessionStorage.removeItem(key);\n  });\n\n  // Clear next_message_* sessions\n  const nextMessageKeys = Object.keys(sessionStorage).filter(key => key.startsWith('next_message_'));\n  nextMessageKeys.forEach(key => {\n    sessionStorage.removeItem(key);\n  });    \n\n  // Clear bot_response_* sessions\n  const botResponseKeys = Object.keys(sessionStorage).filter(key => key.startsWith('bot_response_'));\n  botResponseKeys.forEach(key => {\n    sessionStorage.removeItem(key);\n  });\n\n  // Clear reference_data_* sessions\n  const referenceDataKeys = Object.keys(sessionStorage).filter(key => key.startsWith('reference_data_'));\n  referenceDataKeys.forEach(key => {\n    sessionStorage.removeItem(key);\n  });\n\n  location.reload();\n\n}\n\n\nfunction setLoader(on,id){\n  const gbloader = document.getElementById('gb-chatbot-loader-'+id);\n  const gbsubbutton = document.getElementById('gb-submit-icon-'+id);\n  const gbbuttonloader = document.getElementById('gb-submit-loading-'+id);\n  if(on){\n    gbloader.classList.remove(\"gb-hidden\");\n    gbsubbutton.classList.add(\"gb-hidden\");\n    gbbuttonloader.classList.remove(\"gb-hidden\");\n  }else{\n    gbloader.classList.add(\"gb-hidden\");\n    gbsubbutton.classList.remove(\"gb-hidden\");\n    gbbuttonloader.classList.add(\"gb-hidden\");\n  }\n\n}\n\n\n\n"],"names":["abortController","AbortController","next_session","containterid","initHomePage","window","addEventListener","checkViewMode","gbForm","document","getElementById","gbSubmitBtn","gbTextarea","querySelector","async","event","preventDefault","inputText","value","disabled","makeRequest","onclick","e","resetChat","message","route","next_message","trim","length","alert","setLoader","scrollIntoView","behavior","block","newId","Date","now","toString","response","fetch","method","body","JSON","stringify","chat_session","username","headers","signal","ok","json","text","Error","data","reader","pipeThrough","TextDecoderStream","getReader","botResponseText","botFlex","done","read","botRefer","createElement","className","id","appendChild","makeReference","messageParagraph","innerHTML","marked","parse","error","console","log","name","userprompt","dataresp","output","next_node","searchDatas","queries","Object","keys","url","formattedData","map","_","index","title","content","date","sessionStorage","filter","key","startsWith","forEach","removeItem","location","reload","on","gbloader","gbsubbutton","gbbuttonloader","classList","remove","add"],"sourceRoot":""}